/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //vector<vector<int>>a;
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        queue<TreeNode*>a;
        vector<vector<int>>demo;
        if(root==NULL){
            return demo;
        }
        vector<vector<int>>res(1000);
        int i=0;
        a.push(root);
        
        int j=1;
        
        while(j){
            queue<TreeNode*> b;
        while(a.size()!=0){
            //cout<<1;
            TreeNode* temp=a.front();
            //cout<<1;
            if(temp->left!=NULL){
                b.push(temp->left);
            }
            //cout<<1;
            if(temp->right!=NULL){
                b.push(temp->right);
            }
            //cout<<1;
            int y=temp->val;
            res[i].push_back(y);
            //cout<<temp->val<<endl;
            //cout<<1;
            a.pop();
            
            
            
        }
            i++;
            //queue<TreeNode*>c;
            
            if(b.size()==0){
                j=0;
            }
            while(b.size()){
                a.push(b.front());
                b.pop();
            }
            
        }
        
        vector<vector<int>>ret(i);
        for(int k=0;k<res.size();k++){
            for(int l=0;l<res[k].size();l++){
                ret[ret.size()-k-1].push_back(res[k][l]);
            }
        }
        return ret;
        
        
        
    }
};