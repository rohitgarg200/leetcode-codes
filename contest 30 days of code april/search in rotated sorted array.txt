class Solution {
public:
    int search(vector<int>& nums, int target) {
        int start=0;
            if(nums.size()<1){
                    return -1;
            }
            if(nums.size()==1){
                    if(nums[0]==target){
                            return 0;
                    }
                    return -1;
            }
            
        int end=nums.size()-1;
            int mid=(start+end)/2;
            int min=nums[0];
            int min_index=0;
                    
                    
                    while(start<end){
                          
                            if(nums[start]<nums[end]){
                                    if(nums[start]<nums[mid]){
                                            end=mid-1;
                                    }else{
                                            start=mid+1;
                                    }
                            }
                            else{
                                    if(nums[mid]<nums[end]){
                                            end=mid-1;
                                    }
                                    else{
                                            start=mid+1;
                                    }
                            }                   
                            
                            
                            
                            
                              if(min<nums[mid]){
                                    min=nums[mid];
                                    min_index=mid;
                            }
                             if( start<nums.size()&& min<nums[start]){
                                    min=nums[start];
                                    min_index=start;
                            }
                             if(end >=0 && min<nums[end]){
                                    min=nums[end];
                                    min_index=end;
                            }
                            
                  if(nums[mid]==target){
                           return mid;
                   }
                   if(start<nums.size() && nums[start]==target){
                           return start;
                   }
                   if(end>=0 && nums[end]==target){
                           return end;
                   }
                       mid=(start+end)/2;     
                            
                    }
            
            
            start=0;
            end=nums.size()-1;
            if(nums[start]<=target && nums[min_index]>=target){
                    end=min_index;
            }else{
                    start=min_index;
            }
            
            
            mid=(start+end)/2;
            while(start<end){
                    if(nums[mid]<=target){
                            start=mid+1;
                    }
                    else{
                            end=mid-1;
                    }
                    
                                                
                  if(nums[mid]==target){
                           return mid;
                   }
                   if(start<nums.size() && nums[start]==target){
                           return start;
                   }
                   if(end>=0 && nums[end]==target){
                           return end;
                   }
                    mid=(start+end)/2;
                    
            }
            
            
            
            
            
            return -1;
            
            
    }
};