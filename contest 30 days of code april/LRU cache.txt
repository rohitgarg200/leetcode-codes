class LRUCache {
public:
        int c;
        list<int>a;
         unordered_map<int,int>b;
        
    LRUCache(int capacity) {
            
           c=capacity;
           
        
    }
    
    int get(int key) {
            if(b.find(key)==b.end()){
                    return -1;
            }
            else{
                    a.remove(key);
                    a.push_back(key);
                    return b[key];
                    
            }
            
           // return -1;
        
    }
    
    void put(int key, int value) {
           if(b.find(key) != b.end() ){
            b.erase(key);
            a.remove(key);
        }
        if(a.size() == c){
           int temp = a.front();
            a.pop_front();
            b.erase(temp);
        }
        b[key] = value;
        a.push_back(key);
    }
        
    };

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */