class Trie {
public:
         unordered_map<string,int>a;
    /** Initialize your data structure here. */
    Trie() {
            ;
           
        
    }
       //Trie *a=new Trie();
    
    /** Inserts a word into the trie. */
    void insert(string word) {
            string t="";
            for(int i=0;i<word.length()-1;i++){
                t+=word[i];
                    if(a.find(t)==a.end())
                    a.insert({t,0});
                    
            }
            if(a.find(word)==a.end())
            a.insert({word,1});
            else{
                    if(a[word]==0){
                            a[word]=1;
                    }
            }
        
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
           if(a.find(word)!=a.end())
                   if(a[word])
                   return 1;
        return 0;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
            if(a.find(prefix)!=a.end()){
                return 1;}
        return 0;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */