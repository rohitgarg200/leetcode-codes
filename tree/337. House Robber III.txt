/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<TreeNode*,int>mp;
    unordered_map<TreeNode*,int>np;
    int rob(TreeNode* root) {
        int amount=0;
        int c=0;
        return max(solve(root,0,amount),solve(root,1,0));
        
        
    }
    int solve(TreeNode * root,int c ,int amount){
        if(root==NULL){
return 0;}
        
       
        if(c ==1 && mp.find(root)!=mp.end()){
            return mp[root];
        }
        if(c==0 && np.find(root)!=np.end()){
            return np[root];
        }
        if( c==1 && mp.find(root)==mp.end()){
                mp.insert({root,0});
            }
        if(c==0 && np.find(root)==np.end()){
        np.insert({root,0});    
        }
        
        if(c==1){
            
            mp[root]=max(mp[root],max(root->val+solve(root->left,0,0)+solve(root->right,0,0),solve(root->left,1,0)+solve(root->right,1,0)));
            return mp[root];
        }
        else{
            np[root]=max(np[root],solve(root->left,1,0)+solve(root->right,1,0));
            return np[root];
        }
    }
};